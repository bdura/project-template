{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This repository proposes a template for Python projects.</p> <p>Features :</p> <ul> <li>Strict dependency management with Poetry</li> <li>Beautiful documentation with MkDocs</li> <li>Github actions</li> <li>Testing and coverage using Pytest</li> <li>Consistent formatting with Black</li> <li>Lightning-fast linting with Ruff</li> <li>Static type checking with MyPy</li> </ul> <p>I basically used the best practice from EDS-PDF1, although I updated a few parts.</p> <ol> <li> <p>Basile Dura, Perceval Wajsburt, Alice Calliger, Christel G\u00e9rardin, and Romain Bey. EDS-PDF: Smart text extraction from PDF documents. URL: https://github.com/aphp/edspdf, doi:10.5281/zenodo.6902977.\u00a0\u21a9</p> </li> </ol>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v010-2023-02-12","title":"v0.1.0 (2023-02-12)","text":"<p>Inception ! </p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Strict dependency management with Poetry</li> <li>Beautiful documentation with MkDocs</li> <li>Github actions</li> <li>Testing and coverage using Pytest</li> <li>Consistent formatting with Black</li> <li>Lightning-fast linting with Ruff</li> <li>Static type checking with MyPy</li> </ul>"},{"location":"reading-list/","title":"Reading List","text":"<ul> <li>Python types intro</li> </ul>"},{"location":"roadmap/","title":"Roadmap","text":""},{"location":"howto/","title":"How To Overview","text":"<p>This is a section index...</p>"},{"location":"howto/dependency-management/","title":"Dependency Management with Poetry","text":"<p>Poetry is a strict dependency management tool that makes sure your Python environment is fully reproducible.</p> <p>To that end, Poetry keeps track of all dependencies (meaning the requirements you specify, as well as their requirements, recursively) and saves the state of your environment into a <code>poetry.lock</code> file.</p> <p>This is standard practice</p> <p>For instance, in JavaScript, the packager Yarn keeps a <code>yarn.lock</code> file for the exact same purpose.</p> <p>Poetry is configured within a <code>pyproject.toml</code> file, where (potentially lax) constraints are placed on your requirements. When you install for the first time, Poetry will:</p> <ul> <li>Make sure the constraints can be resolved (eg you specify <code>pandas&gt;1.2</code> and   <code>some-library</code>, which specifies <code>pandas&lt;1.1.4</code> internally)</li> <li>Install the most up-to-date relevant version for every dependency.</li> </ul> <p>Then, you can update your environment with <code>poetry update</code>. Poetry will again install the most up-to-date relevant version for every dependency.</p> <p>See Poetry's refresher course on semantic versionning if need be.</p>"},{"location":"howto/dependency-management/#installing-a-new-dependency","title":"Installing a new dependency","text":"<p>Poetry introduces the concept of dependency group. Your project may require a library to run, or for development purposes (eg formatter, linter, tests).</p> <p>It's best practice to divide theses into groups. Let's say your project needs Pandas to run, and Pytest for testing. One way to install those would be:</p> <pre><code>color:grey # Add pandas to the default group\n$ poetry add pandas\n---&gt; 100%\ncolor:grey # Add pytest to the \"test\" group\n$ poetry add --group test pytest\n---&gt; 100%\n</code></pre>"},{"location":"howto/dependency-management/#removing-a-dependency","title":"Removing a dependency","text":"<p>Call <code>poetry remove [--group]</code> to remove a dependency.</p> <pre><code>$ poetry remove pandas\n---&gt; 100%\n</code></pre>"},{"location":"reference/","title":"<code>template</code>","text":""},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>template<ul> <li>functional</li> </ul> </li> </ul>"},{"location":"reference/functional/","title":"<code>template.functional</code>","text":""},{"location":"reference/functional/#template.functional.add","title":"<code>add(a, b)</code>","text":"<p>Add two integers together.</p> PARAMETER DESCRIPTION <code>a</code> <p>Left side of the add.</p> <p> TYPE: <code>int</code> </p> <code>b</code> <p>Right side of the add.</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>int</code> <p>Result</p> Source code in <code>template/functional.py</code> <pre><code>def add(a: int, b: int) -&gt; int:\n\"\"\"\n    Add two integers together.\n\n    Parameters\n    ----------\n    a : int\n        Left side of the add.\n    b : int\n        Right side of the add.\n\n    Returns\n    -------\n    int\n        Result\n    \"\"\"\n\n    return a + b\n</code></pre>"}]}